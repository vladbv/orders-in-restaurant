@layout LoginLayout
@page "/register"

@using Models
@using RestaurantOrders_18114037.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Repository.Services.AccountManagmentService managmentService

<style>
    button{
        margin-top:2px;
    }
    div{
        margin:1px;
    }
    h3{
        margin-bottom:1%;
        
    }
    hr{
        width:400px;

    }
    button{
        margin:auto;
    }
    .outer_container{
        display:flex;
        flex-direction:row;
        justify-content:center;
    }
    .flex-container_login{
      margin-right:2%;
    
    }
    .flex-container_addres{
      margin-left:2%;
    }
</style>
<center>
    <h3 class="display-4">Registration</h3>
</center>
<hr class="my-3" />
<EditForm Model="@newClient" OnValidSubmit="@ValidateUser">
    <div class="box-shadow">
        <div class="outer_container">
            <div class ="flex-container_login">
                <DataAnnotationsValidator/>
                <div>E-Mail: <br />   <InputText id="Email" @bind-Value="newClient.EMail" />
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newClient.EMail"/>
                </div>
                </div>
                <br />
                <div>Login: <br />    <InputText id="Login" @bind-Value="newClient.Login"/>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newClient.Login"/>
                </div>
                </div>
                <br />
                <div>Password<br />   <InputText type="password" id="password" @bind-Value="newClient.Password"/></div>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newClient.Password"/>
                </div>
                <br />
                <div>Repeat password<br />   <InputText type="password" id="retypePassword" @bind-Value="retypePassword"/></div>
                <div style="color:rgb(255,51,51)">
                    @if(wrongPassword)
                    {
                        <p>Passwords are different!</p>
                    }
                </div>
                <br />
                <center>
                    <button type="submit" class="btn btn-primary">Register</button>
                </center>
             </div>
             <div class ="flex-container_addres">
                <div>Name <br />     <InputText id="firstName" @bind-Value="newClient.Name"/>
                 <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newClient.Name"/>
                </div>
                </div>
                <br />
                <div>Surname:<br />   <InputText id="secondName" @bind-Value="newClient.Surname"/>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newClient.Surname"/>
                </div>
                </div>
                <br />
                <div>Telephone: <br />    <InputText id="Phone" @bind-Value="newClient.PhoneNumber"/>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newClient.PhoneNumber"/>
                </div>
                </div>
                <br />
                <div>Address:<br />  <InputText id="Address" style="width:220px;" @bind-Value="newClient.Address"/></div>
                <br />
               </div>
        </div>
    </div>
</EditForm>

@if(isException) //
{
<!-- 
    <center> 
        <hr>
       
    </center>
    <p>@error</p> 
--> 
}

@code 
{
    // private User user;
    private ClientFront newClient;
    private string error;
    private string retypePassword;
    private bool isException = false;
    private bool wrongPassword = false;
    private string passwordValidationMessage = "";

    protected override Task OnInitializedAsync()
    {
        //user = new User();
        newClient = new ClientFront();
        newClient.Address = "";
        return base.OnInitializedAsync();
    }

    private bool checkPasswordFront() => newClient.Password == retypePassword ? true : false;

    private async Task<bool> ValidateUser()
    {
        try
        {
            if (checkPasswordFront())
            {
                wrongPassword = isException = false;
                newClient.Role = "Client";
                var hashedPassword = new passwordController().hashPassword(newClient.Password);
                var AccountAndClient = await managmentService.AddNewClient(newClient.EMail, newClient.Login, hashedPassword,
                                            newClient.Name, newClient.Surname, DateTime.Today, newClient.PhoneNumber, 0, newClient.Address, newClient.Role);

                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(newClient);
                NavigationManager.NavigateTo("/");

                await sessionStorage.SetItemAsStringAsync("email", newClient.EMail);
                await sessionStorage.SetItemAsStringAsync("name", newClient.Name);
                await sessionStorage.SetItemAsStringAsync("surname", newClient.Surname);
                await sessionStorage.SetItemAsStringAsync("login", newClient.Login);
                await sessionStorage.SetItemAsStringAsync("password", newClient.Password);
                await sessionStorage.SetItemAsStringAsync("phone", newClient.Name);
                await sessionStorage.SetItemAsStringAsync("address", newClient.Address);
                await sessionStorage.SetItemAsStringAsync("role", newClient.Role);
                await sessionStorage.SetItemAsStringAsync("account_id", AccountAndClient.Item1.IdAccount.ToString());
                await sessionStorage.SetItemAsStringAsync("points", AccountAndClient.Item2.Points.ToString());
                newClient = new ClientFront();

                return await Task.FromResult(true);
            }
            else
            {
                wrongPassword = true;
                isException = true;
                throw new Exception("Incorect password!");
            }
        }
        catch (Exception e)
        {
            this.StateHasChanged();
            error = e.ToString();
            isException = true;
            return await Task.FromResult(false);
        }
    }
}