@page "/client/info"

@using RestaurantOrders_18114037.Data

@inject NavigationManager NavigationManager
@inject Repository.Services.FoodService Storage
@inject Repository.Services.ClientService clientService
@inject Repository.Services.AccountManagmentService accountManagementService
@inject Repository.Services.AccountService accountService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Account information</h3>
<hr>


@if (accountFront is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-item2">
        <h3></h3>
        <EditForm class="box-shadow" Model="@accountFront">
            <div>
             
        <div class="outer_container">
                <div class="row">
                    
                    <div class="flex-md-column mx-auto"><p><strong>Name</strong></p><p>@accountFront.Name </p></div>
                    <div class="flex-md-column mx-auto"><p><strong>Login:</strong></p><p>@accountFront.Login </p></div> 
                </div>
                <br />

                <div class="row">  
                    <div class="flex-md-column mx-auto"><p><strong>Surname:</strong></p><p>@accountFront.Surname </p></div>
                    <div class="flex-md-column mx-auto"><p><strong>E-Mail:</strong></p><p>@accountFront.EMail </p></div>
                </div>
                <br />

                <div class="row">
                    <div class="flex-md-column mx-auto"><p><strong>Address:</strong></p><p>@clientFrontDataUpdate.Address </p></div>
                    <div class="flex-md-column mx-auto"><p><strong>Phone:</strong></p><p>@accountFront.PhoneNumber </p></div>
                </div>
                <br />

                <div class="row">
                     <div class="flex-md-column pr-3 mx-auto"><p><strong>Points:</strong></p><p>@clientFrontDataUpdate.Points</p></div>
                </div>
                <br />

             </div>
            </div>


            <DataAnnotationsValidator />
            <ValidationSummary />

            <br />
            <center>
            <button type="button" class="btn btn-primary" @onclick="goToUserDataEditing">Edit data</button>
            </center>
            
        </EditForm>
    </div>

}

@if (wasException)
{
    <center>
        <hr>
        <p style="color:rgb(255,51,51)">@error</p>
    </center>
}

@code
{
    private string oldPassword;
    private string insertedNewPassword;
    private string insertedNewPasswordConfirmation;
    private string insertedOldPassword;
    private Models.AccountFront accountFront;
    private Models.ClientFrontDataUpdate clientFrontDataUpdate;
    private string error;
    private bool wasException;

    protected override async Task OnParametersSetAsync()
    {
        wasException = false;
        try
        {
            await initAccountData();
            oldPassword = "";
            insertedNewPassword = "";
            insertedNewPasswordConfirmation = "";

        }
        catch (Exception e)
        {
            error = e.Message;
            wasException = true;
        }
    }

    private async Task initAccountData()
    {
        var passwordFromSession = await sessionStorage.GetItemAsStringAsync("password");
        var passwordHashed = new passwordController().hashPassword(passwordFromSession);
        var dbUser = await accountService.GetAccountByLoginAndPassword(await sessionStorage.GetItemAsStringAsync("email"), passwordHashed);
        accountFront = new Models.AccountFront()
            {
                IdAccount = dbUser.IdAccount,
                EMail = dbUser.EMail,
                Login = dbUser.Login,
                Password = dbUser.Password,
                Name = dbUser.Name,
                Surname = dbUser.Surname,
                PhoneNumber = dbUser.PhoneNumber,
                Role = dbUser.Role,
                AccountCreationDate = dbUser.AccountCreationDate
            };

        var clientData = await clientService.GetClientByAccountId(accountFront.IdAccount);
        clientFrontDataUpdate = new Models.ClientFrontDataUpdate()
            {
                IdClient = clientData.IdClient,
                Address = clientData.Address,
                Points = clientData.Points,
                AccountIdAccount = clientData.AccountIdAccount
            };


    }

    

    private void goToUserDataEditing()
    {
        NavigationManager.NavigateTo("/client/info/edit");
    }

}
