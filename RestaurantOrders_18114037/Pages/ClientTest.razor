@page "/Test/Client"

@using Repository.Repositories;
@using Models
@using DataBaseAccess.Models

@inject Repository.Services.AccountManagmentService managmentService
@inject Repository.Services.AccountService accountService
@inject Repository.Services.ClientService clientService
<style>
   .table-fill {
  background: white;
  border-radius:3px;
  border-collapse: collapse;
  height: 320px;
  margin: 2%;
  max-width: 1000px;
  padding:5px;
  width: 100%;
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
  animation: float 5s infinite;
}
 
th {
  color:#D5DDE5;;
  background:rgb(0, 123, 255);
  border-bottom:4px solid #9ea7af;
  border-right: 1px solid #343a45;
  font-size:23px;
  font-weight: 100;
  padding:24px;
  text-align:left;
  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);
  vertical-align:middle;
}

th:first-child {
  border-top-left-radius:3px;
}
 
th:last-child {
  border-top-right-radius:3px;
  border-right:none;
}
  
tr {
  border-top: 1px solid #C1C3D1;
  border-bottom-: 1px solid #C1C3D1;
  color:#666B85;
  font-size:16px;
  font-weight:normal;
  text-shadow: 0 1px 1px rgba(256, 256, 256, 0.1);
}
 
tr:hover td {
  background:#4E5066;
  color:#FFFFFF;
  border-top: 1px solid #22262e;
}
 
tr:first-child {
  border-top:none;
}

tr:last-child {
  border-bottom:none;
}
 
tr:nth-child(odd) td {
  background:#EBEBEB;
}
 
tr:nth-child(odd):hover td {
  background:#4E5066;
}

tr:last-child td:first-child {
  border-bottom-left-radius:3px;
}
 
tr:last-child td:last-child {
  border-bottom-right-radius:3px;
}
 
td {
  background:#FFFFFF;
  padding:20px;
  text-align:left;
  vertical-align:middle;
  font-weight:300;
  font-size:18px;
  text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);
  border-right: 1px solid #C1C3D1;
}

td:last-child {
  border-right: 0px;
}

th.text-left {
  text-align: left;
}

th.text-center {
  text-align: center;
}

th.text-right {
  text-align: right;
}

td.text-left {
  text-align: left;
}

td.text-center {
  text-align: center;
}

td.text-right {
  text-align: right;
}
</style>

<center>
    <h3>Select a form</h3>
    <br />
    <div class="box-shadow">
        <button type="button" class="btn btn-primary" @onclick="triggerDisplayInsertForm">Display Insert</button>
        <button type="button" class="btn btn-primary" @onclick="triggerDisplayClients">Display Clients</button>
        <button type="button" class="btn btn-primary" @onclick="triggerDisplayDeleteClient">Display Delete</button>
        <button type="button" class="btn btn-primary" @onclick="triggerDisplayUpdatePoints">Display Update</button>
        <button type="button" class="btn btn-primary" @onclick="refresh">Refresh</button>
    </div>
</center>

@if (displayInsertForm)
{
    <h4>Insert New Client</h4>
    <div class="box-shadow">
    <center>
        <EditForm Model="@newClient" OnValidSubmit="@InsertClient">
            
                <div>Name:      <InputText id="firstName" @bind-Value="newClient.Name"/></div>
                <br />
                <div>Surname:   <InputText id="secondName" @bind-Value="newClient.Surname"/></div>
                <br />
                <div>E-Mail:    <InputText id="Email" @bind-Value="newClient.EMail"/></div>
                <br />
                <div>Login:     <InputText id="Login" @bind-Value="newClient.Login"/></div>
                <br />
                <div>Password:  <InputText id="Password" @bind-Value="newClient.Password"/></div>
                <br />
                <div>Phone:     <InputText id="Phone" @bind-Value="newClient.PhoneNumber"/></div>
                <br />
                <div>Address:  <InputText id="Address" @bind-Value="newClient.Address"/></div>
                <br />
                <div>Role:  <InputText id="Role" @bind-Value="newClient.Role"/></div>
                <br />
         
                <DataAnnotationsValidator/>
                <ValidationSummary/>  
          
            <button type="submit" class="btn btn-primary mb-2">Insert</button>
        </EditForm>
    </center>
      </div>
}

@if (displayDeleteClient)
{
  
    <h4>Delete Client</h4>
      <center>
        <div class="box-shadow"> 
            <input type="number" @bind-value="userID" @bind-value:event="oninput" />
            <button type="button" class="btn btn-primary m-2" @onclick="deleteClient">Delete client</button>
        </div>
    </center>
}

@if (displayUpdatePoints)
{
    <h4>Update Client</h4>

    <center>
        <div class="box-shadow"> 
            <div><p>Client Id:</p><input type="number" @bind-value="clientID" @bind-value:event="oninput" /></div>
            <div><p>Points:</p><input type="number" @bind-value="points" @bind-value:event="oninput" /></div>
            <button type="button" class="btn btn-primary m-2" @onclick="AddPoints">Update</button>
        </div>
    </center>
}

@if (displayClients)
{
    <h4>Current People</h4>
    @if (people is null || clients is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        if (displayClients)
        {
            <div class="border-secondary">
                <center>
                    <table class="table-fill">
                        <thead>
                            <tr>
                                <th class="text-left">Client Id</th>
                                <th class="text-left">Account Id</th>
                                <th class="text-left">Adress</th>
                                <th class="text-left">Points</th>
                            </tr>
                        </thead>
                        <tbody class ="table-hover">
                            @foreach(var item in clients)
                            {
                                <tr>
                                    <td class="text-left">@item.IdClient</td>
                                    <td class="text-left">@item.AccountIdAccount</td>
                                    <td class="text-left">@item.Address</td>
                                    <td class="text-left">@item.Points</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </center>
            </div>

            <div class="border-secondary">
                <center>
                    <table class="table-fill">
                        <thead>
                            <tr>
                                <th class="text-left">Account Id</th>
                                <th class="text-left">First name</th>
                                <th class="text-left">Last name</th>
                                <th class="text-left">Email Address</th>
                                <th class="text-left">Login</th>
                                <th class="text-left">Creation Date</th>
                                <th class="text-left">Phone number</th>
                                <th class="text-left">Role</th>
                            </tr>
                        </thead>
                        <tbody class="table-hover">
                            @foreach(var item in people)
                            {
                                <tr>
                                    <td class="text-left">@item.IdAccount</td>
                                    <td class="text-left">@item.Name</td>
                                    <td class="text-left">@item.Surname</td>
                                    <td class="text-left">@item.EMail</td>
                                    <td class="text-left">@item.Login</td>
                                    <td class="text-left">@item.AccountCreationDate</td>
                                    <td class="text-left">@item.PhoneNumber</td>
                                    <td class="text-left">@item.Role</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </center>
            </div>
        }
    }
}


@code 
{
    private bool displayClients = true;
    private bool displayInsertForm;
    private bool displayUpdatePoints;
    private bool displayDeleteClient;
    private int userID;
    private int points;
    private int clientID;
    private List<Account> people;
    private List<Client> clients;
    private ClientFront newClient = new ClientFront();

    protected override async Task OnParametersSetAsync()
    {
        people = await accountService.GetAccounts();
        clients = await clientService.GetClients();
    }

    private async void refresh()
    {
        await this.OnParametersSetAsync();
        this.StateHasChanged();
    }

    protected void deleteClient()
    {
        managmentService.DeleteClient(userID);
        this.refresh();
    }

    private async void InsertClient()
    {
        //newClient = new ClientFront();
        await managmentService.AddNewClient(newClient.EMail, newClient.Login, newClient.Password,
                                    newClient.Name, newClient.Surname, DateTime.Today, newClient.PhoneNumber, 0, newClient.Address, newClient.Role);
        newClient = new ClientFront();
        this.refresh();
    }

    private void AddPoints()
    {
        clientService.UpdateClientPoints(clientID, points);
        this.refresh();
    }

    private void triggerDisplayClients()
    {
        if (displayClients == true)
            displayClients = false;
        else
            displayClients = true;
    }

    private void triggerDisplayInsertForm()
    {
        if (displayInsertForm == true)
            displayInsertForm = false;
        else
            displayInsertForm = true;
    }

    private void triggerDisplayUpdatePoints()
    {
        if (displayUpdatePoints == true)
            displayUpdatePoints = false;
        else
            displayUpdatePoints = true;
    }

    private void triggerDisplayDeleteClient()
    {
        if (displayDeleteClient == true)
            displayDeleteClient = false;
        else
            displayDeleteClient = true;
    }
}